#!/bin/bash

##################################################################################################
# hoobs-cli                                                                                      #
# Copyright (C) 2020 HOOBS                                                                       #
#                                                                                                #
# This program is free software: you can redistribute it and/or modify                           #
# it under the terms of the GNU General Public License as published by                           #
# the Free Software Foundation, either version 3 of the License, or                              #
# (at your option) any later version.                                                            #
#                                                                                                #
# This program is distributed in the hope that it will be useful,                                #
# but WITHOUT ANY WARRANTY; without even the implied warranty of                                 #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                  #
# GNU General Public License for more details.                                                   #
#                                                                                                #
# You should have received a copy of the GNU General Public License                              #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.                          #
##################################################################################################

CURRENT_DIRECTORY=$PWD

print_status() {
    if [[ "_$2" != "_" ]]; then
        echo "[$1] $2"
    else
        echo "$1"
    fi
}

get_os() {
    OS_BASE=$(uname | awk '{print tolower($0)}')
    OS_NAME="unknown"
    OS_CONTAINER=$(cat /proc/1/cgroup | grep 'docker\|lxc')

    if command -v python > /dev/null; then
        OS_PYTHON="python"
    elif command -v python3 > /dev/null; then
        OS_PYTHON="python3"
    else
        OS_PYTHON=""
    fi

    case $OS_BASE in
        "darwin")
            OS_NAME=$(sw_vers -productName | awk '{print tolower($0)}')
            ;;

        "linux")
            content=$(cat /etc/*-release | grep =)

            eval $content

            if [ "_$ID_LIKE" != "_" ]; then
                OS_NAME=$ID_LIKE
            else
                OS_NAME=$ID
            fi

            OS_NAME=${OS_NAME,,}
            ;;
    esac

    if command -v dnf > /dev/null; then
        OS_PACKAGE_MNGR="dnf"
    elif command -v yum > /dev/null; then
        OS_PACKAGE_MNGR="yum"
    elif command -v apt-get > /dev/null; then
        OS_PACKAGE_MNGR="apt-get"
    elif command -v apk > /dev/null; then
        OS_PACKAGE_MNGR="apk"
    fi
}

get_node()
{
    case $OS_NAME in
        "alpine")
            sudo apk update

            NODE_RELEASE=$(apk version nodejs | sed -e 'H;${x;s/\n/,/g;s/^,//;p;};d' | awk -F'[,]' '{print $2}' | awk -F'[=]' '{print $2}' | awk -F'[ ]' '{print $2}' | awk -F'[-]' '{print $1}')
            ;;

        "debian" | "raspbian" | "ubuntu")
            sudo apt-get update

            NODE_RELEASE=$(apt-cache show nodejs | grep Version | awk -F'[-~ ]' '{print $2}' | sed -e 'H;${x;s/\n/,/g;s/^,//;p;};d' | awk -F'[,]' '{print $1}')
            ;;

        "fedora" | "rhel" | "centos")
            NODE_RELEASE=$($OS_PACKAGE_MNGR info nodejs | grep Version | sed -e 'H;${x;s/\n/,/g;s/^,//;p;};d' | awk -F'[,]' '{print $1}' | awk -F'[:]' '{print $2}' | awk -F'[ ]' '{print $2}')
            ;;

        * )
            NODE_RELEASE=$(curl -sL https://support.hoobs.org/api/releases/node/latest | $OS_PYTHON -c "import sys, json; print(json.load(sys.stdin)['results']['version'])")
            ;;
    esac
}

get_hbs()
{
    HBS_PREFIX="/usr/"

    HBS_RELEASE=$(curl -sL https://support.hoobs.org/api/releases/hbs/latest | $OS_PYTHON -c "import sys, json; print(json.load(sys.stdin)['results']['version'])")
    HBS_RELEASE=${HBS_RELEASE#"v"}
    HBS_RELEASE_URL=$(curl -sL https://support.hoobs.org/api/releases/hbs/latest | $OS_PYTHON -c "import sys, json; print(json.load(sys.stdin)['results']['download'])")

    if command -v hbs > /dev/null; then
        WORKING="$PATH"

        local IFS=':'

        read -ra ADDR <<< "$WORKING"

        for DIR in "${ADDR[@]}";
        do
            if [[ "$DIR" != "/tmp/"* && -f "$DIR/hbs" ]]; then
                HBS_PREFIX="$(cd $DIR/../;pwd)/"

                break
            fi
        done
    fi
}

get_hoobsd()
{
    HOOBSD_PREFIX="/usr/"

    HOOBSD_RELEASE=$(curl -sL https://support.hoobs.org/api/releases/hoobsd/latest | $OS_PYTHON -c "import sys, json; print(json.load(sys.stdin)['results']['version'])")
    HOOBSD_RELEASE=${HOOBSD_RELEASE#"v"}
    HOOBSD_RELEASE_URL=$(curl -sL https://support.hoobs.org/api/releases/hoobsd/latest | $OS_PYTHON -c "import sys, json; print(json.load(sys.stdin)['results']['download'])")

    if command -v hoobsd > /dev/null; then
        WORKING="$PATH"

        local IFS=':'

        read -ra ADDR <<< "$WORKING"

        for DIR in "${ADDR[@]}";
        do
            if [[ "$DIR" != "/tmp/"* && -f "$DIR/hoobsd" ]]; then
                HOOBSD_PREFIX="$(cd $DIR/../;pwd)/"

                break
            fi
        done
    fi
}

configure_repos() {
    case $OS_NAME in
        "alpine")
            sudo sed -i -e 's/v[[:digit:]]\..*\//edge\//g' /etc/apk/repositories
            sudo apk upgrade --update-cache --available
            source ~/.bashrc
            ;;

        "debian" | "raspbian" | "ubuntu")
            wget https://deb.nodesource.com/setup_lts.x
            chmod 755 ./setup_lts.x
            sudo ./setup_lts.x
            rm -f ./setup_lts.x
            sudo apt-get update
            source ~/.bashrc
            ;;

        "fedora" | "rhel" | "centos")
            wget https://rpm.nodesource.com/setup_lts.x
            chmod 755 ./setup_lts.x
            sudo ./setup_lts.x
            rm -f ./setup_lts.x
            source ~/.bashrc
            ;;
    esac
}

install_node() {
    case $OS_NAME in
        "alpine")
            sudo apk update
            sudo apk add curl tar git python3 make gcc g++ nodejs
            sudo npm install -g yarn
            ;;

        "debian" | "raspbian" | "ubuntu")
            sudo apt-get update
            sudo apt-get install -y curl tar git python3 make gcc g++ nodejs
            sudo npm install -g yarn
            ;;

        "fedora" | "rhel" | "centos")
            sudo $OS_PACKAGE_MNGR install -y curl tar git policycoreutils python3 make gcc gcc-c++ nodejs
            sudo npm install -g yarn
            ;;

        "macos")
            curl -sL https://nodejs.org/dist/v$NODE_RELEASE/node-v$NODE_RELEASE.pkg --output $CURRENT_DIRECTORY/node.pkg
            sudo installer -pkg $CURRENT_DIRECTORY/node.pkg -target /
            rm -f $CURRENT_DIRECTORY/node.pkg
            sudo npm install -g yarn
            ;;
    esac
}

gyp_rebuild() {
    cd $1/lib/$2
    sudo yarn install --force --production
    cd $CURRENT_DIRECTORY
}

sudo uname > /dev/null
get_os

if [[ "_$OS_CONTAINER" != "_" ]]; then
    print_status "[ ERROR ] this script is not intended for containers, to upgrade please pull a new image"

    exit 1
fi

if [[ "_$OS_PYTHON" == "_" ]]; then
    print_status "[ ERROR ] this script requires python, please install python"

    exit 1
fi

configure_repos
install_node
get_node
get_hbs

print_status "installing cli $HBS_RELEASE"

if [[ "_$HBS_RELEASE_URL" != "_" ]]; then
    curl -sL $HBS_RELEASE_URL --output $CURRENT_DIRECTORY/hbs.tar.gz

    sudo tar -xzf $CURRENT_DIRECTORY/hbs.tar.gz -C $HBS_PREFIX --strip-components=1 --no-same-owner
    sudo rm -f $CURRENT_DIRECTORY/hbs.tar.gz
fi

if [[ -f "$HBS_PREFIX/lib/hbs/package.json" ]]; then
    gyp_rebuild $HBS_PREFIX hbs
else
    print_status "[ ERROR ] cli install failed"

    exit 1
fi

get_hoobsd

print_status "installing hoobsd $HOOBSD_RELEASE"

if [[ "_$HOOBSD_RELEASE_URL" != "_" ]]; then
    curl -sL $HOOBSD_RELEASE_URL --output $CURRENT_DIRECTORY/hoobsd.tar.gz

    sudo tar -xzf $CURRENT_DIRECTORY/hoobsd.tar.gz -C $HOOBSD_PREFIX --strip-components=1 --no-same-owner
    sudo rm -f $CURRENT_DIRECTORY/hoobsd.tar.gz
fi

if [[ -f "$HOOBSD_PREFIX/lib/hoobsd/package.json" ]]; then
    gyp_rebuild $HOOBSD_PREFIX hoobsd

    sudo hbs install -p 80
    sudo hbs extention add gui
    sudo hoobsd service restart
else
    print_status "[ ERROR ] hoobsd install failed"

    exit 1
fi
