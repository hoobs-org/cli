#!/bin/bash

##################################################################################################
# hoobs-cli                                                                                      #
# Copyright (C) 2020 HOOBS                                                                       #
#                                                                                                #
# This program is free software: you can redistribute it and/or modify                           #
# it under the terms of the GNU General Public License as published by                           #
# the Free Software Foundation, either version 3 of the License, or                              #
# (at your option) any later version.                                                            #
#                                                                                                #
# This program is distributed in the hope that it will be useful,                                #
# but WITHOUT ANY WARRANTY; without even the implied warranty of                                 #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                  #
# GNU General Public License for more details.                                                   #
#                                                                                                #
# You should have received a copy of the GNU General Public License                              #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.                          #
##################################################################################################

CURRENT_DIRECTORY=$PWD

DEBUG="false"
FORCE_REBUILD="false"

usage()
{
    echo ""
    echo "help: setup [-d | --debug] [--rebuild]"
    echo "    Display information about builtin commands."
    echo ""
    echo "    Installs HOOBS with prerequisites, including Node, NPM and Avachi."
    echo ""
    echo "    Note:"
    echo "        This script requires elevated permissions, please run this with"
    echo "        SUDO or ROOT privileges."
    echo ""
    echo "    Options:"
    echo "        -d, --debug    show debug information"
    echo "        --rebuild      force component rebuild"
    echo "        --help         displays this help menu"
    echo ""
    echo "    Returns:"
    echo "        Returns success unless the install fails."
    echo ""
}

version_compare() {
    if [[ $1 == $2 ]]; then
        return 0
    fi

    local IFS='.'
    local i left=($1) right=($2)

    for ((i=${#left[@]}; i<${#right[@]}; i++))
    do
        left[i]=0
    done

    for ((i=0; i<${#left[@]}; i++))
    do
        if [[ -z ${right[i]} ]]; then
            right[i]=0
        fi

        if ((10#${left[i]} > 10#${right[i]})); then
            return 1
        fi

        if ((10#${left[i]} < 10#${right[i]})); then
            return 2
        fi
    done

    return 0
}

get_os() {
    OS_BASE=$(uname)
    OS_BASE=${OS_BASE,,}
    OS_ARCH=$(uname -m)
    OS_NAME=unknown
    OS_VERSION=unknown

    if [ "_${OS_ARCH}" == "_i686" ]; then
        OS_ARCH=i386
    elif [ "_${OS_ARCH}" == "_x86_64" ]; then
        OS_ARCH=x86_64
    elif [ "_${OS_ARCH}" == "_aarch64" ]; then
        OS_ARCH=aarch64
    fi

    case $OS_BASE in
        "darwin")
            OS_NAME=$(sw_vers -productName)
            OS_NAME=${OS_NAME,,}
            OS_VERSION=$(sw_vers -productVersion)
            ;;

        "linux")
            content=$(cat /etc/*-release | grep =)

            eval $content

            if [ "_$ID_LIKE" != "_" ]; then
                OS_NAME=$ID_LIKE
            else
                OS_NAME=$ID
            fi

            OS_NAME=${OS_NAME,,}
            OS_VERSION=$VERSION_ID
            ;;
    esac

    if command -v dnf > /dev/null; then
        OS_PACKAGE_MNGR="dnf"
    elif command -v yum > /dev/null; then
        OS_PACKAGE_MNGR="yum"
    elif command -v apt-get > /dev/null; then
        OS_PACKAGE_MNGR="apt-get"
    elif command -v apk > /dev/null; then
        OS_PACKAGE_MNGR="apk"
    fi
}

get_node()
{
    NODE_INSTALLED="false"
    NODE_VERSION=""
    NODE_PREFIX="/usr/"

    if command -v node > /dev/null; then
        NODE_INSTALLED="true"
        NODE_VERSION=$(node -v)
        NODE_VERSION=${NODE_VERSION#"v"}

        WORKING="$PATH"

        local IFS=':'

        read -ra ADDR <<< "$WORKING"

        for DIR in "${ADDR[@]}";
        do
            if [[ -f "$DIR/node" ]]; then
                NODE_PREFIX="$(cd $DIR/../;pwd)/"

                break
            fi
        done

        case $OS_NAME in
            "alpine")
                $OS_PACKAGE_MNGR sudo update > /dev/null

                NODE_RELEASE=$($OS_PACKAGE_MNGR version nodejs | sed -e 'H;${x;s/\n/,/g;s/^,//;p;};d' | awk -F'[,]' '{print $2}' | awk -F'[=]' '{print $2}' | awk -F'[ ]' '{print $2}' | awk -F'[-]' '{print $1}')
                NODE_UPGRADED="false"

                version_compare $NODE_VERSION $NODE_RELEASE

                case $? in
                    0) NODE_UPGRADED="true";;
                    1) NODE_UPGRADED="true";;
                    2) NODE_UPGRADED="false";;
                esac

                ;;

            "debian" | "raspbian" | "ubuntu")
                $OS_PACKAGE_MNGR update > /dev/null

                NODE_RELEASE=$(apt-cache show nodejs | grep Version | awk -F'[-~ ]' '{print $2}' | sed -e 'H;${x;s/\n/,/g;s/^,//;p;};d' | awk -F'[,]' '{print $1}')
                NODE_UPGRADED="false"

                version_compare $NODE_VERSION $NODE_RELEASE

                case $? in
                    0) NODE_UPGRADED="true";;
                    1) NODE_UPGRADED="true";;
                    2) NODE_UPGRADED="false";;
                esac

                ;;

            "fedora" | "rhel" | "centos")
                NODE_RELEASE=$NODE_VERSION # GET VERSION FROM DNF
                NODE_UPGRADED="false"

                version_compare $NODE_VERSION $NODE_RELEASE

                case $? in
                    0) NODE_UPGRADED="true";;
                    1) NODE_UPGRADED="true";;
                    2) NODE_UPGRADED="false";;
                esac

                ;;
        esac
    fi
}

get_hoobs_cli()
{
    HOOBS_CLI_INSTALLED="false"
    HOOBS_CLI_VERSION=""
    HOOBS_CLI_PREFIX="/usr/"
    HOOBS_CLI_MODE="none"
    HOOBS_CLI_RELEASE_URL=""

    if command -v hoobs > /dev/null; then
        HOOBS_CLI_INSTALLED="true"
        HOOBS_CLI_VERSION=$(hoobs -v)

        WORKING="$PATH"

        local IFS=':'

        read -ra ADDR <<< "$WORKING"

        for DIR in "${ADDR[@]}";
        do
            if [[ -f "$DIR/hoobs" ]]; then
                HOOBS_CLI_PREFIX="$(cd $DIR/../;pwd)/"

                break
            fi
        done

        local release=$(curl -s https://api.github.com/repos/hoobs-org/cli/releases/latest)
        local extract="import os, json

try:
    print(json.loads(os.environ['release'])['tag_name'])
except:
    print('')"

        export release

        HOOBS_CLI_RELEASE=$(python3 -c "${extract}")
        HOOBS_CLI_RELEASE=${HOOBS_CLI_RELEASE#"v"}
        HOOBS_CLI_RELEASE_ASSET="hoobs-cli-$HOOBSD_RELEASE.tar.gz"

        local script="import os, json

result = ''
data = json.loads(os.environ['release'])

try:
    for entry in data['assets']:
        if entry['name'] == '$HOOBS_CLI_RELEASE_ASSET':
            result = entry['browser_download_url']
except:
    result = ''

print(result);"

        HOOBS_CLI_RELEASE_URL=$(python3 -c "${script}")

        if [[ -f "$HOOBS_CLI_PREFIX/lib/hoobs/package.json" ]]; then
            HOOBS_CLI_UPGRADED="false"

            version_compare $HOOBS_CLI_VERSION $HOOBS_CLI_RELEASE

            case $? in
                0) HOOBS_CLI_UPGRADED="true";;
                1) HOOBS_CLI_UPGRADED="true";;
                2) HOOBS_CLI_UPGRADED="false";;
            esac

            HOOBS_CLI_MODE="production"
        elif [[ -f "$HOOBS_CLI_PREFIX/package.json" ]]; then
            HOOBS_CLI_UPGRADED="true"
            HOOBS_CLI_MODE="development"
        fi
    fi
}

get_hoobsd()
{
    HOOBSD_INSTALLED="false"
    HOOBSD_VERSION=""
    HOOBSD_PREFIX="/usr/"
    HOOBSD_MODE="none"
    HOOBSD_RELEASE_URL=""

    if command -v hoobsd > /dev/null; then
        HOOBSD_INSTALLED="true"
        HOOBSD_VERSION=$(hoobsd -v)

        WORKING="$PATH"

        local IFS=':'

        read -ra ADDR <<< "$WORKING"

        for DIR in "${ADDR[@]}";
        do
            if [[ -f "$DIR/hoobsd" ]]; then
                HOOBSD_PREFIX="$(cd $DIR/../;pwd)/"

                break
            fi
        done

        local release=$(curl -s https://api.github.com/repos/hoobs-org/hoobsd/releases/latest)
        local extract="import os, json

try:
    print(json.loads(os.environ['release'])['tag_name'])
except:
    print('')"

        export release

        HOOBSD_RELEASE=$(python3 -c "${extract}")
        HOOBSD_RELEASE=${HOOBSD_RELEASE#"v"}
        HOOBSD_RELEASE_ASSET="hoobsd-$HOOBSD_RELEASE.tar.gz"

        local script="import os, json

result = ''
data = json.loads(os.environ['release'])

try:
    for entry in data['assets']:
        if entry['name'] == '$HOOBSD_RELEASE_ASSET':
            result = entry['browser_download_url']
except:
    result = ''

print(result)"

        HOOBSD_RELEASE_URL=$(python3 -c "${script}")

        if [[ -f "$HOOBSD_PREFIX/lib/hoobsd/package.json" ]]; then
            HOOBSD_UPGRADED="false"

            version_compare $HOOBSD_VERSION $HOOBSD_RELEASE

            case $? in
                0) HOOBSD_UPGRADED="true";;
                1) HOOBSD_UPGRADED="true";;
                2) HOOBSD_UPGRADED="false";;
            esac

            HOOBSD_MODE="production"
        elif [[ -f "$HOOBSD_PREFIX/package.json" ]]; then
            HOOBSD_UPGRADED="true"
            HOOBSD_MODE="development"
        fi
    fi
}

configure_repos() {
    case $OS_NAME in
        "alpine")
            sed -i -e 's/v[[:digit:]]\\..*\\//edge\\//g' /etc/apk/repositories
            $OS_PACKAGE_MNGR upgrade --update-cache --available
            ;;

        "debian" | "raspbian" | "ubuntu")
            curl -sL https://deb.nodesource.com/setup_lts.x | bash -
            ;;

        "fedora" | "rhel" | "centos")
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            ;;
    esac
}

install_node() {
    case $OS_NAME in
        "alpine")
            $OS_PACKAGE_MNGR update
            $OS_PACKAGE_MNGR add curl tar git python3 make gcc g++ nodejs yarn
            ;;

        "debian" | "raspbian" | "ubuntu")
            $OS_PACKAGE_MNGR update
            $OS_PACKAGE_MNGR install -y apt-get install curl tar git python3 make gcc g++ nodejs yarn
            ;;

        "fedora" | "rhel" | "centos")
            $OS_PACKAGE_MNGR install -y curl tar git policycoreutils python3 make gcc gcc-c++ nodejs yarn
            ;;
    esac
}

gyp_rebuild() {
    case $3 in
        "production")
            cd $1/lib/$2
            ;;

        "development")
            cd $1
            ;;
    esac

    yarn install --force --production

    cd $CURRENT_DIRECTORY
}

while [ "$1" != "" ]; do
    case $1 in
        -d | --debug )  DEBUG="true"
                        ;;

        --rebuild )     FORCE_REBUILD="true"
                        ;;

        * )             usage
                        exit
    esac

    shift
done

if test -t 1; then # if terminal
    SHELL_COLORS=$(which tput > /dev/null && tput colors)

    if test -n "$SHELL_COLORS" && test $SHELL_COLORS -ge 8; then
        BOLD="$(tput bold)"
        UNDERLINE="$(tput smul)"
        STANDOUT="$(tput smso)"
        NORMAL="$(tput sgr0)"
        BLACK="$(tput setaf 0)"
        RED="$(tput setaf 1)"
        GREEN="$(tput setaf 2)"
        YELLOW="$(tput setaf 3)"
        BLUE="$(tput setaf 4)"
        MAGENTA="$(tput setaf 5)"
        CYAN="$(tput setaf 6)"
        WHITE="$(tput setaf 7)"
    fi
fi

if [[ "$DEBUG" == "true" ]]; then
    echo ""
    echo "User: $USER"
    echo "Directory: $PWD"
fi

if [ "$USER" != "root" ]; then
    echo
    echo "${BOLD}${YELLOW}root is required, did you forget to use 'sudo'?"
    echo

    exit 1
fi

get_os

if [[ "$DEBUG" == "true" ]]; then
    echo ""
    echo "os arch: $OS_ARCH"
    echo "os base: $OS_BASE"
    echo "os name: $OS_NAME"
    echo "os version: $OS_VERSION"
    echo ""
fi

echo "fetching version information"

get_node
get_hoobsd
get_hoobs_cli

if [[ "$DEBUG" == "true" ]]; then
    echo ""
    echo "node installed: $NODE_INSTALLED"
    echo "node version: $NODE_VERSION"
    echo "node prefix: $NODE_PREFIX"
    echo "node release: $NODE_RELEASE"
    echo "node upgraded: $NODE_UPGRADED"
fi

if [[ "$NODE_INSTALLED" = "false" || "$NODE_UPGRADED" == "false" ]]; then
    if [[ "$NODE_INSTALLED" = "true" ]]; then
        echo "upgrading node to $NODE_RELEASE"
    else
        echo "installing node $NODE_RELEASE"
    fi

    configure_repos
    install_node
    get_node

    if [[ "$NODE_UPGRADED" == "false" ]]; then
        echo "${BOLD}${RED}node install failed"

        exit 1
    else
        GYP_REBUILD="true"
    fi
else
    echo "node up-to-date"
fi

if [[ "$DEBUG" == "true" ]]; then
    echo ""
    echo "hoobs cli installed: $HOOBS_CLI_INSTALLED"
    echo "hoobs cli version: $HOOBS_CLI_VERSION"
    echo "hoobs cli prefix: $HOOBS_CLI_PREFIX"
    echo "hoobs cli release: $HOOBS_CLI_RELEASE"
    echo "hoobs cli download url: $HOOBS_CLI_RELEASE_URL"
    echo "hoobs cli upgraded: $HOOBS_CLI_UPGRADED"
    echo "hoobs cli mode: $HOOBS_CLI_MODE"
fi

if [[ "$HOOBS_CLI_INSTALLED" == "false" || "$HOOBS_CLI_UPGRADED" == "false" ]]; then
    if [[ "$HOOBS_CLI_INSTALLED" = "true" ]]; then
        echo "upgrading hoobs cli to $HOOBS_CLI_RELEASE"
    else
        echo "installing hoobs cli $HOOBS_CLI_RELEASE"
    fi

    if [[ "_$HOOBS_CLI_RELEASE_URL" != "_" ]]; then
        curl -sL $HOOBS_CLI_RELEASE_URL | tar xz -C $HOOBS_CLI_PREFIX --strip-components=1 --no-same-owner
    fi

    if [[ -f "$HOOBS_CLI_PREFIX/lib/hoobs/package.json" ]]; then
        gyp_rebuild $HOOBS_CLI_PREFIX hoobs production
    else
        echo "${BOLD}${RED}hoobs cli install failed"

        exit 1
    fi
elif [[ "$GYP_REBUILD" == "true" || "$FORCE_REBUILD" == "true" ]]; then
    echo "rebuilding hoobs cli for node $NODE_VERSION"

    gyp_rebuild $HOOBS_CLI_PREFIX hoobs $HOOBS_CLI_MODE
else
    echo "hoobs cli up-to-date"
fi

if [[ "$DEBUG" == "true" ]]; then
    echo ""
    echo "hoobsd installed: $HOOBSD_INSTALLED"
    echo "hoobsd version: $HOOBSD_VERSION"
    echo "hoobsd prefix: $HOOBSD_PREFIX"
    echo "hoobsd release: $HOOBSD_RELEASE"
    echo "hoobsd download url: $HOOBSD_RELEASE_URL"
    echo "hoobsd upgraded: $HOOBSD_UPGRADED"
    echo "hoobsd mode: $HOOBSD_MODE"
fi

if [[ "$HOOBSD_INSTALLED" == "false" || "$HOOBSD_UPGRADED" == "false" ]]; then
    if [[ "$HOOBS_CLI_INSTALLED" = "true" ]]; then
        echo "upgrading hoobsd to $HOOBSD_RELEASE"
    else
        echo "installing hoobsd $HOOBSD_RELEASE"
    fi

    if [[ "_$HOOBSD_RELEASE_URL" != "_" ]]; then
        curl -sL $HOOBSD_RELEASE_URL | tar xz -C $HOOBSD_PREFIX --strip-components=1 --no-same-owner
    fi

    if [[ -f "$HOOBSD_PREFIX/lib/hoobsd/package.json" ]]; then
        gyp_rebuild $HOOBSD_PREFIX hoobsd production
    else
        echo "${BOLD}${RED}hoobsd install failed"

        exit 1
    fi
elif [[ "$GYP_REBUILD" == "true" || "$FORCE_REBUILD" == "true" ]]; then
    echo "rebuilding hoobsd for node $NODE_VERSION"

    gyp_rebuild $HOOBSD_PREFIX hoobsd $HOOBSD_MODE
else
    echo "hoobsd up-to-date"
fi

if [[ "$DEBUG" == "true" ]]; then
    echo ""
fi
