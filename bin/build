#!/usr/bin/env node

/**************************************************************************************************
 * hoobs-cli                                                                                      *
 * Copyright (C) 2020 HOOBS                                                                       *
 *                                                                                                *
 * This program is free software: you can redistribute it and/or modify                           *
 * it under the terms of the GNU General Public License as published by                           *
 * the Free Software Foundation, either version 3 of the License, or                              *
 * (at your option) any later version.                                                            *
 *                                                                                                *
 * This program is distributed in the hope that it will be useful,                                *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of                                 *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                                  *
 * GNU General Public License for more details.                                                   *
 *                                                                                                *
 * You should have received a copy of the GNU General Public License                              *
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.                          *
 **************************************************************************************************/

const Program = require("commander");
const { join } = require("path");
const { execSync } = require("child_process");

const {
    existsSync,
    mkdirSync,
    readFileSync,
    removeSync,
    writeFileSync
} = require("fs-extra");

const root = join(__dirname, "../");
const pjson = JSON.parse(readFileSync(join(root, "package.json")).toString());

Program.version(pjson.version, "-v, --version", "output the current version")
    .allowUnknownOption();

Program.command("cli", { isDefault: true })
    .description("build hoobs cli")
    .option("-l, --lint", "lint the code before building")
    .option("-p, --pack", "create pack file for offline testing")
    .action((command) => {
        if (command.lint) execSync(`${join(root, "node_modules", ".bin", "eslint")} 'src/**/*.ts'`, { cwd: root, stdio: "inherit" });

        if (!existsSync(join(root, "lib"))) mkdirSync(join(root, "lib"));
        if (!existsSync(join(root, "dist"))) mkdirSync(join(root, "dist"));
        if (!existsSync(join(root, "dist"))) mkdirSync(join(root, "yarn"));

        execSync(`${join(root, "node_modules", ".bin", "rimraf")} ${join(root, "lib")}`, { cwd: root, stdio: "inherit" });
        execSync(`${join(root, "node_modules", ".bin", "rimraf")} ${join(root, "dist")}`, { cwd: root, stdio: "inherit" });
        execSync(`${join(root, "node_modules", ".bin", "rimraf")} ${join(root, "yarn")}`, { cwd: root, stdio: "inherit" });

        execSync(`${join(root, "node_modules", ".bin", "tsc")}`, { cwd: root, stdio: "inherit" });

        if (command.pack) {
            if (!existsSync(join(root, "dist"))) mkdirSync(join(root, "yarn"));

            execSync(`cp -R ${join(root, "node_modules/yarn/*")} ${join(root, "yarn")}`, { cwd: root, stdio: "inherit" });

            const pjson = JSON.parse(readFileSync(join(root, "yarn", "package.json")).toString());
            const content = readFileSync(join(root, "yarn", "bin", "yarn.js")).toString();

            pjson.main = "lib/cli.js";
            pjson.bin = "bin/yarn.js";

            writeFileSync(join(root, "yarn", "package.json"), JSON.stringify(pjson, null, 4));
            writeFileSync(join(root, "yarn", "bin", "yarn.js"), content.replace(/require\(__dirname \+ '\//g, "require('"));

            execSync(`cp ${join(root, "package.json")} ${join(root, "var", "package.json")}`, { cwd: root, stdio: "inherit" });

            execSync(`${join(root, "node_modules", ".bin", "pkg")} . -t node12.2.0-linux-x64 --options max_old_space_size=4096 -o ../var/yarn`, { cwd: join(root, "yarn"), stdio: "inherit" });
            execSync(`${join(root, "node_modules", ".bin", "pkg")} . -t node12.2.0-linux-x64 --options max_old_space_size=4096 -o dist/linux/hoobs`, { cwd: root, stdio: "inherit" });
            removeSync(join(root, "var", "yarn"));

            execSync(`${join(root, "node_modules", ".bin", "pkg")} . -t node12.2.0-linux-armv7 --options max_old_space_size=4096 -o ../var/yarn`, { cwd: join(root, "yarn"), stdio: "inherit" });
            execSync(`${join(root, "node_modules", ".bin", "pkg")} . -t node12.2.0-linux-armv7 --options max_old_space_size=4096 -o dist/raspios/hoobs`, { cwd: root, stdio: "inherit" });
            removeSync(join(root, "var", "yarn"));

            execSync(`${join(root, "node_modules", ".bin", "pkg")} . -t node12.2.0-alpine-x64 --options max_old_space_size=4096 -o ../var/yarn`, { cwd: join(root, "yarn"), stdio: "inherit" });
            execSync(`${join(root, "node_modules", ".bin", "pkg")} . -t node12.2.0-alpine-x64 --options max_old_space_size=4096 -o dist/alpine/hoobs`, { cwd: root, stdio: "inherit" });
            removeSync(join(root, "var", "yarn"));

            execSync(`${join(root, "node_modules", ".bin", "pkg")} . -t node12.2.0-macos-x64 --options max_old_space_size=4096 -o ../var/yarn`, { cwd: join(root, "yarn"), stdio: "inherit" });
            execSync(`${join(root, "node_modules", ".bin", "pkg")} . -t node12.2.0-macos-x64 --options max_old_space_size=4096 -o dist/macos/hoobs`, { cwd: root, stdio: "inherit" });
            removeSync(join(root, "var", "yarn"));

            execSync(`${join(root, "node_modules", ".bin", "rimraf")} ${join(root, "yarn")}`, { cwd: root, stdio: "inherit" });

            removeSync(join(root, "var", "package.json"));
        }
    });

Program.parse(process.argv);
